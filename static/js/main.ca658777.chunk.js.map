{"version":3,"sources":["components/Loader.js","serviceWorker.js","routes/Router.js","index.js"],"names":["Loader","name","theme","LoaderDiv","styled","div","LoaderContainer","LoadingText","h3","Name","span","Fragment","toUpperCase","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Index","lazy","About","Error","lazyLoader","Component","props","fallback","Router","exact","path","component","ReactDOM","render","StrictMode","Helmet","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ca658777.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\n\r\n\r\nexport default function Loader({name, theme}) {\r\n    const LoaderDiv = styled.div`\r\n        width: 50px;\r\n        height: 50px;\r\n        border-radius: 50%;\r\n        border: 8px solid transparent;\r\n        border-top: 8px solid ${theme == 'dark' ? '#fff' : '#333'};\r\n        border-bottom: 8px solid ${theme == 'dark' ? '#fff' : '#333'};\r\n        animation: Loading 1s ease infinite;\r\n        top: 45%;\r\n        transform: translateY(50%);\r\n        @keyframes Loading {\r\n            from {\r\n                transform: rotate(360deg);\r\n            }\r\n            to {\r\n                transform: rotate(0deg);\r\n            }\r\n        }\r\n    `\r\n\r\n    const PreLoaderDiv = styled.div`\r\n        width: 50px;\r\n        height: 50px;\r\n        border-radius: 50%;\r\n        border: 8px dotted ${theme == 'dark' ? '#fff' : '#333'};\r\n        border-top: 8px solid transparent;\r\n        border-bottom: 8px solid transparent;\r\n        animation: PreLoading 1s ease-in-out infinite;\r\n        top: 45%;\r\n        transform: translateY(60%);\r\n        @keyframes PreLoading {\r\n            from {\r\n                transform: rotate(0deg);\r\n            }\r\n            to {\r\n                transform: rotate(360deg);\r\n            }\r\n        }\r\n    `\r\n\r\n    const LoaderContainer = styled.div`\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        margin-left: 50%;\r\n        margin-right: 50%;\r\n    `\r\n\r\n    const LoadingText = styled.h3`\r\n        padding-top: 30px;\r\n        text-align: center;\r\n        color: ${theme == 'dark' ? '#fff' : 'black'} !important;\r\n    `\r\n\r\n    const Name = styled.span`\r\n        color: ${theme == 'dark' ? 'yellow' : 'orange'};\r\n    `\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <LoaderContainer>\r\n                <LoaderDiv/>\r\n                {/* <PreLoaderDiv/> */}\r\n                <LoadingText>Loading <Name>{name ? name.toUpperCase() : ''}</Name> </LoadingText>\r\n            </LoaderContainer>\r\n        </React.Fragment>\r\n    )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Component, Suspense, lazy } from 'react'\r\nimport { \r\n    BrowserRouter, \r\n    Route, \r\n    Switch, \r\n    Link \r\n} from 'react-router-dom'\r\n\r\nimport _ from 'lodash'\r\nimport Loader from '../components/Loader'\r\n\r\nconst Index = lazy(() => import(/* webpackChunkName: \"AppCovid\" */'../components/Index'))\r\nconst About = lazy(() => import(/* webpackChunkName: \"AppAbout\" */'../components/About'))\r\nconst Error = lazy(() => import(/* webpackChunkName: \"App404\" */'../components/404'))\r\n\r\n\r\nconst lazyLoader = (Component, name = '') => {\r\n    return props => (\r\n        <Suspense fallback={<Loader name={name}/>}>\r\n           <React.Fragment>\r\n               <Component {...props}/>\r\n            </React.Fragment>\r\n        </Suspense>\r\n    )\r\n}\r\n\r\nfunction Router() {\r\n    return (\r\n        <React.Fragment>\r\n           \r\n            <BrowserRouter>\r\n                <Switch>\r\n                    <Route exact path=\"/ncov/\" component={lazyLoader(Index, '')}/>\r\n                    <Route exact path=\"/ncov/about\" component={lazyLoader(About, '')}/>\r\n                    <Route component={lazyLoader(Error, '')}/>\r\n                </Switch>\r\n            </BrowserRouter>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Router;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Router from './routes/Router'\r\nimport { Helmet } from 'react-helmet'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Helmet>\r\n      <title>NCOV - Charts</title>\r\n    </Helmet>\r\n    <Router />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}